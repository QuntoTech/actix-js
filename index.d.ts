/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class DetachedRequestWrapper {
  /** 获取请求路径 */
  getPath(): string;
  /** 获取请求方法 */
  getMethod(): string;
  /** 获取查询字符串 */
  getQueryString(): string;
  /** 获取URI */
  getUri(): string;
  /** 获取查询参数作为对象 - 零拷贝优化：使用预计算缓存，无运行时开销 */
  getQueryParams(): { [key: string]: string };
  /** 获取原始请求体字符串 */
  getBodyString(): string;
  /** 检查请求体是否为空 */
  hasBody(): boolean;
  /** 获取请求体大小 */
  getBodySize(): number;
  /** 尝试将请求体解析为JSON对象 - 零拷贝优化：使用预计算缓存，无运行时开销 */
  getBodyJson(): { [key: string]: any };
  /** 获取指定的请求头 */
  getHeader(name: string): string | null;
  /** 获取所有请求头 */
  getHeaders(): { [key: string]: string };
  /** 获取路径参数作为对象 */
  getPathParams(): { [key: string]: string };
  /** 获取指定名称的路径参数值 */
  getPathParam(name: string): string | null;
  /**
   * 异步发送文本响应 - 返回Promise，支持await
   *
   * # Safety
   * 此函数被标记为unsafe是为了与NAPI绑定兼容，但实际操作是安全的。
   * 函数内部只进行响应发送操作，不涉及内存安全问题。
   */
  sendTextAsync(text: string): Promise<void>;
  /**
   * 异步发送JSON响应 - 返回Promise，支持await
   *
   * # Safety
   * 此函数被标记为unsafe是为了与NAPI绑定兼容，但实际操作是安全的。
   * 函数内部只进行响应发送操作，不涉及内存安全问题。
   */
  sendJsonAsync(json: string): Promise<void>;
  /**
   * 🚀 SIMD 优化的异步对象序列化 - 返回Promise，支持await
   *
   * # Safety
   * 此函数被标记为unsafe是为了与NAPI绑定兼容，但实际操作是安全的。
   * 函数内部只进行JSON序列化和响应发送操作，不涉及内存安全问题。
   */
  sendObjectAsync(obj: any): Promise<void>;
  /**
   * 异步发送空响应 - 返回Promise，支持await
   *
   * # Safety
   * 此函数被标记为unsafe是为了与NAPI绑定兼容，但实际操作是安全的。
   * 函数内部只进行响应发送操作，不涉及内存安全问题。
   */
  sendEmptyAsync(): Promise<void>;
  /**
   * 异步发送服务器错误响应 - 返回Promise，支持await
   *
   * # Safety
   * 此函数被标记为unsafe是为了与NAPI绑定兼容，但实际操作是安全的。
   * 函数内部只进行响应发送操作，不涉及内存安全问题。
   */
  sendErrorAsync(message?: string | undefined | null): Promise<void>;
  /**
   * 异步设置响应状态码 - 返回Promise，支持await
   *
   * # Safety
   * 此函数被标记为unsafe是为了与NAPI绑定兼容，但实际操作是安全的。
   * 函数内部只进行状态码设置操作，不涉及内存安全问题。
   */
  setStatusCodeAsync(status: number): Promise<boolean>;
  /**
   * 异步添加响应头 - 返回Promise，支持await
   *
   * # Safety
   * 此函数被标记为unsafe是为了与NAPI绑定兼容，但实际操作是安全的。
   * 函数内部只进行响应头添加操作，不涉及内存安全问题。
   */
  addHeaderAsync(key: string, value: string): Promise<void>;
  /**
   * 异步获取表单数据参数，支持 application/x-www-form-urlencoded 和 multipart/form-data 格式
   * 对于文件字段，直接返回文件信息对象 - 零拷贝优化：使用预计算缓存，无运行时开销
   *
   * # Safety
   * 此函数被标记为unsafe是为了与NAPI绑定兼容，但实际操作是安全的。
   * 函数内部只进行缓存数据读取操作，不涉及内存安全问题。
   */
  getFormDataAsync(): Promise<any>;
  /**
   * 异步获取表单数据中指定键的值 - 零拷贝优化：使用预计算缓存，无运行时开销
   *
   * # Safety
   * 此函数被标记为unsafe是为了与NAPI绑定兼容，但实际操作是安全的。
   * 函数内部只进行缓存数据读取操作，不涉及内存安全问题。
   */
  getFormValueAsync(key: string): Promise<any | null>;
}

export declare class RequestWrapper {
  /** 获取请求路径 - 零拷贝优化：直接返回，避免不必要的克隆 */
  getPath(): string;
  /** 获取请求方法 - 零拷贝优化：直接返回，避免不必要的克隆 */
  getMethod(): string;
  /** 获取查询字符串 - 零拷贝优化：直接返回，避免不必要的克隆 */
  getQueryString(): string;
  /** 获取URI - 零拷贝优化：直接返回，避免不必要的克隆 */
  getUri(): string;
  /** 获取查询参数作为对象 - 零拷贝优化：延迟解析，只计算一次 */
  getQueryParams(): { [key: string]: string };
  /** 获取原始请求体字符串 - 零拷贝优化：直接使用 Bytes 的零拷贝特性 */
  getBodyString(): string;
  /** 检查请求体是否为空 - 零拷贝优化：直接检查，不解析内容 */
  hasBody(): boolean;
  /** 获取请求体大小 - 零拷贝优化：直接返回字节长度 */
  getBodySize(): number;
  /**
   * 🚀 SIMD 优化的 JSON 解析 - 使用 simd-json 提升 2-3 倍性能
   * 尝试将请求体解析为JSON对象 - 零拷贝优化：延迟解析，只计算一次
   */
  getBodyJson(): { [key: string]: any };
  /**
   * 获取表单数据参数，支持 application/x-www-form-urlencoded 和 multipart/form-data 格式
   * 对于文件字段，直接返回文件信息对象 - 零拷贝优化：延迟解析，只计算一次
   */
  getFormData(): any;
  /** 获取表单数据中指定键的值 - 零拷贝优化：使用缓存的表单数据 */
  getFormValue(key: string): any | null;
  /** 获取指定的请求头 - 零拷贝优化：使用延迟解析的缓存 */
  getHeader(name: string): string | null;
  /** 获取所有请求头 - 零拷贝优化：延迟解析，只计算一次 */
  getHeaders(): { [key: string]: string };
  /**
   * 获取路径参数作为对象，例如路由 /api/test/:id 匹配请求 /api/test/123 时返回 {id: "123"}
   * 零拷贝优化：直接返回引用的克隆，避免重复构建
   */
  getPathParams(): { [key: string]: string };
  /** 获取指定名称的路径参数值 - 零拷贝优化：直接从HashMap查找，避免重复遍历 */
  getPathParam(name: string): string | null;
  /** 发送文本响应 */
  sendText(text: string): void;
  /** 发送JSON响应 */
  sendJson(json: string): void;
  /** 🚀 SIMD 优化的对象序列化 - 发送对象作为JSON响应 */
  sendObject(obj: any): void;
  /** 发送空响应 */
  sendEmpty(): void;
  /** 发送服务器错误响应 */
  sendError(message?: string | undefined | null): void;
  /** 设置响应状态码 */
  setStatusCode(status: number): boolean;
  /** 添加响应头 */
  addHeader(key: string, value: string): void;
}

export declare class Server {
  constructor(options: ServerOptions);
  start(): string;
  stop(): Promise<string>;
}

/** 清理所有路由 */
export declare function cleanupRouter(): void;

/** 清理路由缓存 - 在需要强制刷新缓存时调用 */
export declare function clearRouterCache(): void;

/** 注册DELETE路由（兼容旧版本） */
export declare function del(route: string, callback: (err: Error | null, arg: RequestWrapper) => any): void;

/** 注册DELETE路由（异步版本） */
export declare function delAsync(
  route: string,
  callback: (err: Error | null, arg: DetachedRequestWrapper) => any,
): void;

export interface FileInfo {
  type: string;
  originalName: string;
  filename: string;
  path: string;
  contentType?: string;
  size: number;
}

export declare function forceCleanup(): void;

export declare function forceExit(): void;

/** 注册GET路由（兼容旧版本） */
export declare function get(route: string, callback: (err: Error | null, arg: RequestWrapper) => any): void;

/** 注册GET路由（异步版本） */
export declare function getAsync(
  route: string,
  callback: (err: Error | null, arg: DetachedRequestWrapper) => any,
): void;

/** HTTP方法枚举 */
export declare const enum Methods {
  GET = 0,
  POST = 1,
  PUT = 2,
  PATCH = 3,
  DELETE = 4,
}

/** 注册新路由（兼容旧版本） */
export declare function newRoute(
  route: string,
  method: Methods,
  callback: (err: Error | null, arg: RequestWrapper) => any,
): void;

/** 注册新路由（异步版本） */
export declare function newRouteAsync(
  route: string,
  method: Methods,
  callback: (err: Error | null, arg: DetachedRequestWrapper) => any,
): void;

/** 注册PATCH路由（兼容旧版本） */
export declare function patch(route: string, callback: (err: Error | null, arg: RequestWrapper) => any): void;

/** 注册PATCH路由（异步版本） */
export declare function patchAsync(
  route: string,
  callback: (err: Error | null, arg: DetachedRequestWrapper) => any,
): void;

/** 注册POST路由（兼容旧版本） */
export declare function post(route: string, callback: (err: Error | null, arg: RequestWrapper) => any): void;

/** 注册POST路由（异步版本） */
export declare function postAsync(
  route: string,
  callback: (err: Error | null, arg: DetachedRequestWrapper) => any,
): void;

/** 注册PUT路由（兼容旧版本） */
export declare function put(route: string, callback: (err: Error | null, arg: RequestWrapper) => any): void;

/** 注册PUT路由（异步版本） */
export declare function putAsync(
  route: string,
  callback: (err: Error | null, arg: DetachedRequestWrapper) => any,
): void;

export interface ServerOptions {
  host: string;
  port: number;
}

export declare function sum(a: number, b: number): number;
